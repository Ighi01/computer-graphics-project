#version 450layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {    vec3 lightDir;    vec4 lightColor;    vec3 eyePos;} ubo;layout(location = 0) in vec3 fragNormal;layout(location = 1) in vec3 fragPosition;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;void main() {    vec3 normal = normalize(fragNormal);    vec3 lightDirection = normalize(ubo.lightDir);    vec3 viewDir = normalize(ubo.eyePos - fragPosition);        // Ambient lighting    vec3 ambient = 0.1 * vec3(1.0, 1.0, 1.0);    // Diffuse component    float diff = max(dot(lightDirection, normal), 0.0);    vec3 diffuse = diff * vec3(1.0, 1.0, 1.0);        // Specular component    float specularStrength = 0.5;    vec3 reflectDir = reflect(-lightDirection, normal);    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);    vec3 specular = specularStrength * spec * vec3(1.0, 1.0, 1.0);        // Combine results    vec3 color = ambient + diffuse + specular;    outColor = vec4(color, 1.0);}